<?php
namespace org\wso2\carbon\databridge\commons\thrift\data;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ThriftAttributeType {
  const INT = 0;
  const LONG = 1;
  const FLOAT = 2;
  const DOUBLE = 3;
  const BOOL = 4;
  const STRING = 5;
  static public $__names = array(
    0 => 'INT',
    1 => 'LONG',
    2 => 'FLOAT',
    3 => 'DOUBLE',
    4 => 'BOOL',
    5 => 'STRING',
  );
}

class ThriftAttribute {
  static $_TSPEC;

  public $name = null;
  public $attributeType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'attributeType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['attributeType'])) {
        $this->attributeType = $vals['attributeType'];
      }
    }
  }

  public function getName() {
    return 'ThriftAttribute';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->attributeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftAttribute');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributeType !== null) {
      $xfer += $output->writeFieldBegin('attributeType', TType::I32, 2);
      $xfer += $output->writeI32($this->attributeType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventBundle {
  static $_TSPEC;

  public $sessionId = null;
  public $eventNum = null;
  public $intAttributeList = null;
  public $longAttributeList = null;
  public $doubleAttributeList = null;
  public $boolAttributeList = null;
  public $stringAttributeList = null;
  public $arbitraryDataMapMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'eventNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'intAttributeList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'longAttributeList',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        5 => array(
          'var' => 'doubleAttributeList',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        6 => array(
          'var' => 'boolAttributeList',
          'type' => TType::LST,
          'etype' => TType::BOOL,
          'elem' => array(
            'type' => TType::BOOL,
            ),
          ),
        7 => array(
          'var' => 'stringAttributeList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        8 => array(
          'var' => 'arbitraryDataMapMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['eventNum'])) {
        $this->eventNum = $vals['eventNum'];
      }
      if (isset($vals['intAttributeList'])) {
        $this->intAttributeList = $vals['intAttributeList'];
      }
      if (isset($vals['longAttributeList'])) {
        $this->longAttributeList = $vals['longAttributeList'];
      }
      if (isset($vals['doubleAttributeList'])) {
        $this->doubleAttributeList = $vals['doubleAttributeList'];
      }
      if (isset($vals['boolAttributeList'])) {
        $this->boolAttributeList = $vals['boolAttributeList'];
      }
      if (isset($vals['stringAttributeList'])) {
        $this->stringAttributeList = $vals['stringAttributeList'];
      }
      if (isset($vals['arbitraryDataMapMap'])) {
        $this->arbitraryDataMapMap = $vals['arbitraryDataMapMap'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventBundle';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->intAttributeList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->intAttributeList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->longAttributeList = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI64($elem11);
              $this->longAttributeList []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->doubleAttributeList = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readDouble($elem17);
              $this->doubleAttributeList []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->boolAttributeList = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readBool($elem23);
              $this->boolAttributeList []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->stringAttributeList = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $xfer += $input->readString($elem29);
              $this->stringAttributeList []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->arbitraryDataMapMap = array();
            $_size30 = 0;
            $_ktype31 = 0;
            $_vtype32 = 0;
            $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $key35 = 0;
              $val36 = array();
              $xfer += $input->readI32($key35);
              $val36 = array();
              $_size37 = 0;
              $_ktype38 = 0;
              $_vtype39 = 0;
              $xfer += $input->readMapBegin($_ktype38, $_vtype39, $_size37);
              for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
              {
                $key42 = '';
                $val43 = '';
                $xfer += $input->readString($key42);
                $xfer += $input->readString($val43);
                $val36[$key42] = $val43;
              }
              $xfer += $input->readMapEnd();
              $this->arbitraryDataMapMap[$key35] = $val36;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventBundle');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventNum !== null) {
      $xfer += $output->writeFieldBegin('eventNum', TType::I32, 2);
      $xfer += $output->writeI32($this->eventNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->intAttributeList !== null) {
      if (!is_array($this->intAttributeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('intAttributeList', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->intAttributeList));
        {
          foreach ($this->intAttributeList as $iter44)
          {
            $xfer += $output->writeI32($iter44);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longAttributeList !== null) {
      if (!is_array($this->longAttributeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('longAttributeList', TType::LST, 4);
      {
        $output->writeListBegin(TType::I64, count($this->longAttributeList));
        {
          foreach ($this->longAttributeList as $iter45)
          {
            $xfer += $output->writeI64($iter45);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doubleAttributeList !== null) {
      if (!is_array($this->doubleAttributeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('doubleAttributeList', TType::LST, 5);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->doubleAttributeList));
        {
          foreach ($this->doubleAttributeList as $iter46)
          {
            $xfer += $output->writeDouble($iter46);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boolAttributeList !== null) {
      if (!is_array($this->boolAttributeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('boolAttributeList', TType::LST, 6);
      {
        $output->writeListBegin(TType::BOOL, count($this->boolAttributeList));
        {
          foreach ($this->boolAttributeList as $iter47)
          {
            $xfer += $output->writeBool($iter47);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stringAttributeList !== null) {
      if (!is_array($this->stringAttributeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stringAttributeList', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRING, count($this->stringAttributeList));
        {
          foreach ($this->stringAttributeList as $iter48)
          {
            $xfer += $output->writeString($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arbitraryDataMapMap !== null) {
      if (!is_array($this->arbitraryDataMapMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arbitraryDataMapMap', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::I32, TType::MAP, count($this->arbitraryDataMapMap));
        {
          foreach ($this->arbitraryDataMapMap as $kiter49 => $viter50)
          {
            $xfer += $output->writeI32($kiter49);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter50));
              {
                foreach ($viter50 as $kiter51 => $viter52)
                {
                  $xfer += $output->writeString($kiter51);
                  $xfer += $output->writeString($viter52);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


