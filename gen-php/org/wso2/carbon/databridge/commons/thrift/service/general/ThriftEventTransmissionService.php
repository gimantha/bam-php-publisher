<?php
namespace org\wso2\carbon\databridge\commons\thrift\service\general;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ThriftEventTransmissionServiceIf {
  public function defineStream($sessionId, $streamDefinition);
  public function findStreamId($sessionId, $streamName, $streamVersion);
  public function publish(\org\wso2\carbon\databridge\commons\thrift\data\ThriftEventBundle $eventBundle);
  public function deleteStreamById($sessionId, $streamId);
  public function deleteStreamByNameVersion($sessionId, $streamName, $streamVersion);
}

class ThriftEventTransmissionServiceClient implements \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function defineStream($sessionId, $streamDefinition)
  {
    $this->send_defineStream($sessionId, $streamDefinition);
    return $this->recv_defineStream();
  }

  public function send_defineStream($sessionId, $streamDefinition)
  {
    $args = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_defineStream_args();
    $args->sessionId = $sessionId;
    $args->streamDefinition = $streamDefinition;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'defineStream', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('defineStream', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_defineStream()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_defineStream_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_defineStream_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ade !== null) {
      throw $result->ade;
    }
    if ($result->mtd !== null) {
      throw $result->mtd;
    }
    if ($result->tde !== null) {
      throw $result->tde;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("defineStream failed: unknown result");
  }

  public function findStreamId($sessionId, $streamName, $streamVersion)
  {
    $this->send_findStreamId($sessionId, $streamName, $streamVersion);
    return $this->recv_findStreamId();
  }

  public function send_findStreamId($sessionId, $streamName, $streamVersion)
  {
    $args = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_findStreamId_args();
    $args->sessionId = $sessionId;
    $args->streamName = $streamName;
    $args->streamVersion = $streamVersion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findStreamId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findStreamId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findStreamId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_findStreamId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_findStreamId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->tnde !== null) {
      throw $result->tnde;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("findStreamId failed: unknown result");
  }

  public function publish(\org\wso2\carbon\databridge\commons\thrift\data\ThriftEventBundle $eventBundle)
  {
    $this->send_publish($eventBundle);
    $this->recv_publish();
  }

  public function send_publish(\org\wso2\carbon\databridge\commons\thrift\data\ThriftEventBundle $eventBundle)
  {
    $args = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_publish_args();
    $args->eventBundle = $eventBundle;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'publish', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('publish', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_publish()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_publish_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_publish_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ue !== null) {
      throw $result->ue;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function deleteStreamById($sessionId, $streamId)
  {
    $this->send_deleteStreamById($sessionId, $streamId);
    return $this->recv_deleteStreamById();
  }

  public function send_deleteStreamById($sessionId, $streamId)
  {
    $args = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_deleteStreamById_args();
    $args->sessionId = $sessionId;
    $args->streamId = $streamId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteStreamById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteStreamById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteStreamById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_deleteStreamById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_deleteStreamById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("deleteStreamById failed: unknown result");
  }

  public function deleteStreamByNameVersion($sessionId, $streamName, $streamVersion)
  {
    $this->send_deleteStreamByNameVersion($sessionId, $streamName, $streamVersion);
    return $this->recv_deleteStreamByNameVersion();
  }

  public function send_deleteStreamByNameVersion($sessionId, $streamName, $streamVersion)
  {
    $args = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_deleteStreamByNameVersion_args();
    $args->sessionId = $sessionId;
    $args->streamName = $streamName;
    $args->streamVersion = $streamVersion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteStreamByNameVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteStreamByNameVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteStreamByNameVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_deleteStreamByNameVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\wso2\carbon\databridge\commons\thrift\service\general\ThriftEventTransmissionService_deleteStreamByNameVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new \Exception("deleteStreamByNameVersion failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ThriftEventTransmissionService_defineStream_args {
  static $_TSPEC;

  public $sessionId = null;
  public $streamDefinition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'streamDefinition',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['streamDefinition'])) {
        $this->streamDefinition = $vals['streamDefinition'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_defineStream_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamDefinition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_defineStream_args');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streamDefinition !== null) {
      $xfer += $output->writeFieldBegin('streamDefinition', TType::STRING, 2);
      $xfer += $output->writeString($this->streamDefinition);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_defineStream_result {
  static $_TSPEC;

  public $success = null;
  public $ade = null;
  public $mtd = null;
  public $tde = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ade',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftDifferentStreamDefinitionAlreadyDefinedException',
          ),
        2 => array(
          'var' => 'mtd',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftMalformedStreamDefinitionException',
          ),
        3 => array(
          'var' => 'tde',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftStreamDefinitionException',
          ),
        4 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ade'])) {
        $this->ade = $vals['ade'];
      }
      if (isset($vals['mtd'])) {
        $this->mtd = $vals['mtd'];
      }
      if (isset($vals['tde'])) {
        $this->tde = $vals['tde'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_defineStream_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ade = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftDifferentStreamDefinitionAlreadyDefinedException();
            $xfer += $this->ade->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->mtd = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftMalformedStreamDefinitionException();
            $xfer += $this->mtd->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->tde = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftStreamDefinitionException();
            $xfer += $this->tde->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->se = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_defineStream_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ade !== null) {
      $xfer += $output->writeFieldBegin('ade', TType::STRUCT, 1);
      $xfer += $this->ade->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mtd !== null) {
      $xfer += $output->writeFieldBegin('mtd', TType::STRUCT, 2);
      $xfer += $this->mtd->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tde !== null) {
      $xfer += $output->writeFieldBegin('tde', TType::STRUCT, 3);
      $xfer += $this->tde->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 4);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_findStreamId_args {
  static $_TSPEC;

  public $sessionId = null;
  public $streamName = null;
  public $streamVersion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'streamName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'streamVersion',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['streamName'])) {
        $this->streamName = $vals['streamName'];
      }
      if (isset($vals['streamVersion'])) {
        $this->streamVersion = $vals['streamVersion'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_findStreamId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_findStreamId_args');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streamName !== null) {
      $xfer += $output->writeFieldBegin('streamName', TType::STRING, 2);
      $xfer += $output->writeString($this->streamName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streamVersion !== null) {
      $xfer += $output->writeFieldBegin('streamVersion', TType::STRING, 3);
      $xfer += $output->writeString($this->streamVersion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_findStreamId_result {
  static $_TSPEC;

  public $success = null;
  public $tnde = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'tnde',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftNoStreamDefinitionExistException',
          ),
        2 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['tnde'])) {
        $this->tnde = $vals['tnde'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_findStreamId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tnde = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftNoStreamDefinitionExistException();
            $xfer += $this->tnde->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->se = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_findStreamId_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tnde !== null) {
      $xfer += $output->writeFieldBegin('tnde', TType::STRUCT, 1);
      $xfer += $this->tnde->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 2);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_publish_args {
  static $_TSPEC;

  public $eventBundle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventBundle',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\data\ThriftEventBundle',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventBundle'])) {
        $this->eventBundle = $vals['eventBundle'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_publish_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->eventBundle = new \org\wso2\carbon\databridge\commons\thrift\data\ThriftEventBundle();
            $xfer += $this->eventBundle->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_publish_args');
    if ($this->eventBundle !== null) {
      if (!is_object($this->eventBundle)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('eventBundle', TType::STRUCT, 1);
      $xfer += $this->eventBundle->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_publish_result {
  static $_TSPEC;

  public $ue = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ue',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftUndefinedEventTypeException',
          ),
        2 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ue'])) {
        $this->ue = $vals['ue'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_publish_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ue = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftUndefinedEventTypeException();
            $xfer += $this->ue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->se = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_publish_result');
    if ($this->ue !== null) {
      $xfer += $output->writeFieldBegin('ue', TType::STRUCT, 1);
      $xfer += $this->ue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 2);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_deleteStreamById_args {
  static $_TSPEC;

  public $sessionId = null;
  public $streamId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'streamId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['streamId'])) {
        $this->streamId = $vals['streamId'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_deleteStreamById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_deleteStreamById_args');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streamId !== null) {
      $xfer += $output->writeFieldBegin('streamId', TType::STRING, 2);
      $xfer += $output->writeString($this->streamId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_deleteStreamById_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_deleteStreamById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_deleteStreamById_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_deleteStreamByNameVersion_args {
  static $_TSPEC;

  public $sessionId = null;
  public $streamName = null;
  public $streamVersion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'streamName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'streamVersion',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['streamName'])) {
        $this->streamName = $vals['streamName'];
      }
      if (isset($vals['streamVersion'])) {
        $this->streamVersion = $vals['streamVersion'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_deleteStreamByNameVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_deleteStreamByNameVersion_args');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streamName !== null) {
      $xfer += $output->writeFieldBegin('streamName', TType::STRING, 2);
      $xfer += $output->writeString($this->streamName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->streamVersion !== null) {
      $xfer += $output->writeFieldBegin('streamVersion', TType::STRING, 3);
      $xfer += $output->writeString($this->streamVersion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftEventTransmissionService_deleteStreamByNameVersion_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => '\org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'ThriftEventTransmissionService_deleteStreamByNameVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new \org\wso2\carbon\databridge\commons\thrift\exception\ThriftSessionExpiredException();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftEventTransmissionService_deleteStreamByNameVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


